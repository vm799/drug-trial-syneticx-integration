# Docker Compose configuration for local development and testing
version: '3.8'

services:
  # ============================================================================
  # Application Services
  # ============================================================================
  
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        NODE_ENV: development
    container_name: medresearch-ai-app
    restart: unless-stopped
    ports:
      - "3001:3001"  # Backend API
      - "5173:5173"  # Frontend dev server
    environment:
      - NODE_ENV=development
      - MONGODB_URI=mongodb://mongodb:27017/medresearch-dev
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VITE_API_BASE_URL=http://localhost:3001/api
      - VITE_WS_URL=ws://localhost:3001
    volumes:
      - .:/app
      - /app/node_modules
      - /app/server/node_modules
      - app-logs:/app/logs
      - app-uploads:/app/uploads
    depends_on:
      - mongodb
      - redis
    networks:
      - medresearch-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================================================================
  # Database Services
  # ============================================================================
  
  mongodb:
    image: mongo:7
    container_name: medresearch-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-securepassword123}
      MONGO_INITDB_DATABASE: medresearch-dev
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
      - ./docker/mongodb/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - medresearch-network
    command: mongod --auth --bind_ip_all
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: medresearch-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-securepassword123}
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf
    networks:
      - medresearch-network
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-securepassword123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ============================================================================
  # Monitoring & Observability
  # ============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: medresearch-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./docker/prometheus/rules:/etc/prometheus/rules
      - prometheus-data:/prometheus
    networks:
      - medresearch-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  grafana:
    image: grafana/grafana:latest
    container_name: medresearch-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: http://localhost:3000/
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - medresearch-network
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:latest
    container_name: medresearch-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./docker/loki/loki.yml:/etc/loki/loki.yml
      - loki-data:/loki
    networks:
      - medresearch-network
    command: -config.file=/etc/loki/loki.yml

  promtail:
    image: grafana/promtail:latest
    container_name: medresearch-promtail
    restart: unless-stopped
    volumes:
      - ./docker/promtail/promtail.yml:/etc/promtail/promtail.yml
      - app-logs:/var/log/app:ro
      - /var/log:/var/log/host:ro
    networks:
      - medresearch-network
    depends_on:
      - loki
    command: -config.file=/etc/promtail/promtail.yml

  # ============================================================================
  # Development Tools
  # ============================================================================
  
  mailhog:
    image: mailhog/mailhog:latest
    container_name: medresearch-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - medresearch-network

  # Nginx for reverse proxy (optional for development)
  nginx:
    image: nginx:alpine
    container_name: medresearch-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - medresearch-network
    depends_on:
      - app
    profiles:
      - proxy

  # ============================================================================
  # Testing Services
  # ============================================================================
  
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: medresearch-test-runner
    environment:
      - NODE_ENV=test
      - MONGODB_URI=mongodb://mongodb-test:27017/medresearch-test
      - REDIS_URL=redis://redis-test:6379
      - JWT_SECRET=test-jwt-secret
      - OPENAI_API_KEY=test-openai-key
    volumes:
      - .:/app
      - /app/node_modules
      - /app/server/node_modules
      - test-results:/app/coverage
    depends_on:
      - mongodb-test
      - redis-test
    networks:
      - test-network
    profiles:
      - test
    command: npm run test:ci

  mongodb-test:
    image: mongo:7
    container_name: medresearch-mongodb-test
    restart: "no"
    environment:
      MONGO_INITDB_DATABASE: medresearch-test
    volumes:
      - mongodb-test-data:/data/db
    networks:
      - test-network
    profiles:
      - test

  redis-test:
    image: redis:7-alpine
    container_name: medresearch-redis-test
    restart: "no"
    volumes:
      - redis-test-data:/data
    networks:
      - test-network
    profiles:
      - test

# ============================================================================
# Networks
# ============================================================================
networks:
  medresearch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  test-network:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================
volumes:
  # Application data
  app-logs:
    driver: local
  app-uploads:
    driver: local

  # Database data
  mongodb-data:
    driver: local
  mongodb-config:
    driver: local
  redis-data:
    driver: local

  # Test data
  mongodb-test-data:
    driver: local
  redis-test-data:
    driver: local
  test-results:
    driver: local

  # Monitoring data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local