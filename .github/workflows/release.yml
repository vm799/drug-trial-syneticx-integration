name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # VALIDATE RELEASE
  # ============================================================================
  
  validate-release:
    name: üîç Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ "${VERSION}" =~ (alpha|beta|rc) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate version format
        run: |
          if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "‚ùå Invalid version format: ${{ steps.version.outputs.version }}"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          echo "‚úÖ Version format is valid: ${{ steps.version.outputs.version }}"

      - name: Check changelog
        run: |
          if [[ ! -f "CHANGELOG.md" ]]; then
            echo "‚ùå CHANGELOG.md not found"
            exit 1
          fi
          
          # Check if version is mentioned in changelog
          if ! grep -q "${{ steps.version.outputs.version }}" CHANGELOG.md; then
            echo "‚ùå Version ${{ steps.version.outputs.version }} not found in CHANGELOG.md"
            exit 1
          fi
          
          echo "‚úÖ Changelog updated for version ${{ steps.version.outputs.version }}"

      - name: Validate package.json version
        run: |
          PACKAGE_VERSION="v$(node -p "require('./package.json').version")"
          if [[ "${PACKAGE_VERSION}" != "${{ steps.version.outputs.version }}" ]]; then
            echo "‚ùå Package.json version (${PACKAGE_VERSION}) doesn't match release version (${{ steps.version.outputs.version }})"
            exit 1
          fi
          echo "‚úÖ Package.json version matches release version"

  # ============================================================================
  # BUILD RELEASE
  # ============================================================================
  
  build-release:
    name: üèóÔ∏è Build Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-release]
    
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=${{ needs.validate-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

  # ============================================================================
  # COMPREHENSIVE TESTS
  # ============================================================================
  
  release-tests:
    name: üß™ Release Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [validate-release]
    
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Run full test suite
        env:
          NODE_ENV: production
          MONGODB_URI: mongodb://admin:password@localhost:27017/release-test-db?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: release-test-jwt-secret
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # Frontend tests
          npm run test:unit -- --coverage
          
          # Backend tests
          cd server
          npm run test -- --coverage
          
          # Integration tests
          npm run test:integration
          
          cd ..
          
          # Build application
          npm run build
          
          # Start services for E2E tests
          cd server && npm start &
          SERVER_PID=$!
          
          # Wait for server
          timeout 60s bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          
          # Start frontend
          npm run preview &
          FRONTEND_PID=$!
          
          # Wait for frontend
          timeout 60s bash -c 'until curl -f http://localhost:4173; do sleep 2; done'
          
          # Run E2E tests
          npx playwright install --with-deps
          npx playwright test
          
          # Cleanup
          kill $SERVER_PID $FRONTEND_PID || true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: release-test-results
          path: |
            coverage/
            server/coverage/
            playwright-report/
          retention-days: 30

  # ============================================================================
  # SECURITY AUDIT
  # ============================================================================
  
  security-audit:
    name: üõ°Ô∏è Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run comprehensive security audit
        run: |
          # Frontend security audit
          npm audit --audit-level=moderate
          
          # Backend security audit
          cd server && npm audit --audit-level=moderate

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security test
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  # ============================================================================
  # PERFORMANCE BENCHMARK
  # ============================================================================
  
  performance-benchmark:
    name: ‚ö° Performance Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build-release]
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: cd server && npm ci

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start application
        env:
          NODE_ENV: production
          MONGODB_URI: mongodb://localhost:27017/benchmark-db
          JWT_SECRET: benchmark-secret
        run: |
          cd server && npm start &
          timeout 60s bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Run performance benchmarks
        run: |
          # API performance tests
          k6 run --out json=api-performance.json tests/performance/api-benchmark.js
          
          # Load testing
          k6 run --out json=load-test.json tests/performance/load-test.js
          
          # Stress testing
          k6 run --out json=stress-test.json tests/performance/stress-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmark-results
          path: |
            api-performance.json
            load-test.json
            stress-test.json
          retention-days: 90

  # ============================================================================
  # GENERATE RELEASE NOTES
  # ============================================================================
  
  generate-release-notes:
    name: üìù Generate Release Notes
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release]
    
    outputs:
      release-notes: ${{ steps.notes.outputs.release-notes }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PREV_VERSION=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [[ -n "$PREV_VERSION" ]]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" ${PREV_VERSION}..HEAD)
            CONTRIBUTORS=$(git log --pretty=format:"%an" ${PREV_VERSION}..HEAD | sort -u | tr '\n' ',' | sed 's/,$//')
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)")
            CONTRIBUTORS=$(git log --pretty=format:"%an" | sort -u | tr '\n' ',' | sed 's/,$//')
          fi
          
          # Extract changelog section for this version
          CHANGELOG_SECTION=$(awk "/^## \[?${VERSION#v}/ {flag=1; next} /^## / {flag=0} flag" CHANGELOG.md || echo "")
          
          cat > release_notes.md << EOF
          ## üöÄ What's New in ${VERSION}
          
          ${CHANGELOG_SECTION}
          
          ## üìã Full Changelog
          ${COMMITS}
          
          ## üôè Contributors
          ${CONTRIBUTORS}
          
          ## üì¶ Docker Image
          \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}\`
          
          ## üîó Links
          - [Documentation](https://docs.medresearch-ai.com)
          - [API Reference](https://api.medresearch-ai.com/docs)
          - [Support](https://github.com/${{ github.repository }}/issues)
          EOF
          
          RELEASE_NOTES=$(cat release_notes.md)
          echo "release-notes<<EOF" >> $GITHUB_OUTPUT
          echo "${RELEASE_NOTES}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md

  # ============================================================================
  # CREATE GITHUB RELEASE
  # ============================================================================
  
  create-github-release:
    name: üì± Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [
      validate-release,
      build-release,
      release-tests,
      security-audit,
      performance-benchmark,
      generate-release-notes
    ]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-prerelease }}

      - name: Upload release assets
        run: |
          # Generate and upload deployment manifest
          cat > deployment-manifest.yaml << EOF
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: medresearch-ai-config
          data:
            version: "${{ needs.validate-release.outputs.version }}"
            image: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}"
            build-date: "$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git-commit: "${{ github.sha }}"
          EOF
          
          # Upload manifest
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @deployment-manifest.yaml \
            "${{ steps.create_release.outputs.upload_url }}?name=deployment-manifest.yaml&label=Kubernetes+Deployment+Manifest"

  # ============================================================================
  # DEPLOY TO STAGING
  # ============================================================================
  
  deploy-staging:
    name: üé≠ Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [create-github-release, validate-release]
    environment:
      name: staging
      url: https://staging.medresearch-ai.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        env:
          VERSION: ${{ needs.validate-release.outputs.version }}
          IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
        run: |
          echo "üöÄ Deploying ${VERSION} to staging..."
          
          # Replace with your actual deployment commands
          # Examples:
          # kubectl set image deployment/medresearch-ai app=${IMAGE}
          # helm upgrade medresearch-ai ./chart --set image.tag=${VERSION}
          # terraform apply -var="app_version=${VERSION}"
          
          echo "‚úÖ Deployment to staging completed"

      - name: Run staging smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Health check
          curl -f https://staging.medresearch-ai.com/health
          
          # API health check
          curl -f https://staging.medresearch-ai.com/api/health
          
          # Version verification
          VERSION_RESPONSE=$(curl -s https://staging.medresearch-ai.com/api/version)
          if [[ "$VERSION_RESPONSE" != *"${{ needs.validate-release.outputs.version }}"* ]]; then
            echo "‚ùå Version mismatch in staging deployment"
            exit 1
          fi
          
          echo "‚úÖ Staging smoke tests passed"

  # ============================================================================
  # DEPLOY TO PRODUCTION
  # ============================================================================
  
  deploy-production:
    name: üéØ Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [deploy-staging, validate-release]
    environment:
      name: production
      url: https://medresearch-ai.com
    if: needs.validate-release.outputs.is-prerelease == 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        env:
          VERSION: ${{ needs.validate-release.outputs.version }}
          IMAGE: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
        run: |
          echo "üéØ Deploying ${VERSION} to production..."
          
          # Blue-green deployment or canary deployment
          # Replace with your actual deployment commands
          
          echo "‚úÖ Production deployment completed"

      - name: Run production health checks
        run: |
          # Wait for deployment
          sleep 60
          
          # Comprehensive health checks
          curl -f https://medresearch-ai.com/health
          curl -f https://medresearch-ai.com/api/health
          
          # Version verification
          VERSION_RESPONSE=$(curl -s https://medresearch-ai.com/api/version)
          if [[ "$VERSION_RESPONSE" != *"${{ needs.validate-release.outputs.version }}"* ]]; then
            echo "‚ùå Version mismatch in production deployment"
            exit 1
          fi
          
          # Database connectivity
          curl -f https://medresearch-ai.com/api/health/database
          
          # External service connectivity
          curl -f https://medresearch-ai.com/api/health/dependencies
          
          echo "‚úÖ Production health checks passed"

      - name: Update monitoring and alerting
        run: |
          # Update version in monitoring dashboards
          # Configure alerting for new version
          # Update status page
          echo "üìä Monitoring and alerting updated"

  # ============================================================================
  # POST-RELEASE TASKS
  # ============================================================================
  
  post-release:
    name: üéâ Post-Release Tasks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-production, validate-release]
    if: always() && (needs.deploy-production.result == 'success' || needs.deploy-production.result == 'skipped')
    
    steps:
      - name: Update documentation
        run: |
          # Update version in documentation
          # Trigger documentation rebuild
          # Update API docs
          echo "üìñ Documentation updated"

      - name: Notify stakeholders
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          custom_payload: |
            {
              "text": "üöÄ MedResearch AI ${{ needs.validate-release.outputs.version }} has been released!",
              "attachments": [
                {
                  "color": "good",
                  "fields": [
                    {
                      "title": "Version",
                      "value": "${{ needs.validate-release.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Production URL",
                      "value": "https://medresearch-ai.com",
                      "short": true
                    },
                    {
                      "title": "Release Notes",
                      "value": "https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}",
                      "short": false
                    }
                  ]
                }
              ]
            }

      - name: Create post-release issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Post-release checklist for ${{ needs.validate-release.outputs.version }}`,
              body: `
                ## Post-Release Checklist for ${{ needs.validate-release.outputs.version }}
                
                ### Monitoring & Analytics
                - [ ] Monitor application metrics for 24 hours
                - [ ] Check error rates and response times
                - [ ] Review user feedback and support tickets
                - [ ] Analyze usage patterns for new features
                
                ### Documentation & Communication
                - [ ] Update user documentation
                - [ ] Publish blog post about release
                - [ ] Update product roadmap
                - [ ] Notify customer success team
                
                ### Follow-up Tasks
                - [ ] Schedule retrospective meeting
                - [ ] Update dependencies in next sprint
                - [ ] Review and update release process
                - [ ] Plan next release cycle
              `,
              labels: ['post-release', 'checklist']
            });

      - name: Tag Docker image as stable
        if: needs.validate-release.outputs.is-prerelease == 'false'
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.validate-release.outputs.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable

  # ============================================================================
  # FAILURE HANDLING
  # ============================================================================
  
  handle-failure:
    name: üö® Handle Release Failure
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [
      validate-release,
      build-release,
      release-tests,
      security-audit,
      create-github-release,
      deploy-staging,
      deploy-production
    ]
    if: failure()
    
    steps:
      - name: Rollback staging deployment
        if: needs.deploy-staging.result == 'success' && needs.deploy-production.result == 'failure'
        run: |
          echo "üîÑ Rolling back staging deployment..."
          # Add rollback commands here

      - name: Rollback production deployment
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "üîÑ Rolling back production deployment..."
          # Add rollback commands here

      - name: Delete failed release
        if: needs.create-github-release.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: '${{ needs.validate-release.outputs.version }}'
              });
              
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id
              });
            } catch (error) {
              console.log('Release not found or already deleted');
            }

      - name: Notify team of failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          custom_payload: |
            {
              "text": "‚ùå Release ${{ needs.validate-release.outputs.version }} failed!",
              "attachments": [
                {
                  "color": "danger",
                  "fields": [
                    {
                      "title": "Failed Version",
                      "value": "${{ needs.validate-release.outputs.version }}",
                      "short": true
                    },
                    {
                      "title": "Workflow",
                      "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                      "short": true
                    }
                  ]
                }
              ]
            }