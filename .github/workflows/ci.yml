name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Global environment variables
env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # CODE QUALITY & SECURITY CHECKS
  # ============================================================================
  
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Run ESLint
        run: npm run lint -- --format=json --output-file=eslint-results.json
        continue-on-error: true

      - name: Run Prettier Check
        run: npm run format -- --check

      - name: TypeScript Type Check
        run: npm run type-check

      - name: Security Audit (Frontend)
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Security Audit (Backend)
        run: cd server && npm audit --audit-level=high
        continue-on-error: true

      - name: Dependency Vulnerability Check
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload ESLint Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-results
          path: eslint-results.json

  # ============================================================================
  # FRONTEND TESTS
  # ============================================================================
  
  frontend-tests:
    name: 🧪 Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage --reporter=verbose --reporter=json --outputFile=test-results.json

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results-node${{ matrix.node-version }}
          path: |
            coverage/
            test-results.json

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage-node${{ matrix.node-version }}

  # ============================================================================
  # BACKEND TESTS
  # ============================================================================
  
  backend-tests:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: cd server && npm ci

      - name: Wait for MongoDB
        run: |
          until mongosh --host localhost:27017 --eval "print('MongoDB is ready')"; do
            echo "Waiting for MongoDB..."
            sleep 2
          done

      - name: Run backend tests
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password@localhost:27017/test-db?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret-key-for-ci-testing-only
          OPENAI_API_KEY: test-openai-key
        run: |
          cd server
          npm run test -- --coverage --reporter=verbose --reporter=json --outputFile=test-results.json

      - name: Upload backend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results-node${{ matrix.node-version }}
          path: |
            server/coverage/
            server/test-results.json

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: backend
          name: backend-coverage-node${{ matrix.node-version }}

  # ============================================================================
  # END-TO-END TESTS
  # ============================================================================
  
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [frontend-tests, backend-tests]
    
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build frontend
        run: npm run build

      - name: Start test environment
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://admin:password@localhost:27017/e2e-test-db?authSource=admin
          JWT_SECRET: e2e-test-jwt-secret
          OPENAI_API_KEY: test-openai-key
          PORT: 3001
        run: |
          # Start backend server in background
          cd server && npm start &
          
          # Wait for server to be ready
          timeout 60s bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'
          
          # Start frontend dev server in background  
          npm run preview &
          
          # Wait for frontend to be ready
          timeout 60s bash -c 'until curl -f http://localhost:4173; do sleep 2; done'
        
      - name: Run Playwright tests
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:4173
        run: npx playwright test

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # ============================================================================
  # ACCESSIBILITY TESTS
  # ============================================================================
  
  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [frontend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Serve application
        run: |
          npm run preview &
          timeout 60s bash -c 'until curl -f http://localhost:4173; do sleep 2; done'

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouse.config.js'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run axe accessibility tests
        run: npx @axe-core/cli http://localhost:4173 --exit

  # ============================================================================
  # PERFORMANCE TESTS
  # ============================================================================
  
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [backend-tests]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: cd server && npm ci

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start backend server
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/perf-test-db
          JWT_SECRET: perf-test-secret
        run: |
          cd server && npm start &
          timeout 60s bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Run load tests
        run: k6 run tests/performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: performance-results.json

  # ============================================================================
  # BUILD & PACKAGE
  # ============================================================================
  
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, frontend-tests, backend-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd server && npm ci

      - name: Build frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            server/
            !server/node_modules/
          retention-days: 7

      - name: Build Docker image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ============================================================================
  # DEPLOYMENT (STAGING)
  # ============================================================================
  
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [build, e2e-tests, accessibility-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.medresearch-ai.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          # This could be Vercel, Railway, AWS, etc.

      - name: Run smoke tests on staging
        run: |
          curl -f https://staging.medresearch-ai.com/health
          # Add more smoke tests as needed

      - name: Notify team on Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # DEPLOYMENT (PRODUCTION)
  # ============================================================================
  
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, e2e-tests, accessibility-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://medresearch-ai.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your deployment commands here

      - name: Run production health checks
        run: |
          curl -f https://medresearch-ai.com/health
          curl -f https://medresearch-ai.com/api/health

      - name: Update deployment status
        run: |
          # Update monitoring dashboards, notify teams, etc.
          echo "Production deployment completed successfully"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            ${{ github.event.head_commit.message }}
            
            ## Docker Image
            `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}`
          draft: false
          prerelease: false

      - name: Notify team on Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ============================================================================
  # CLEANUP
  # ============================================================================
  
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            // Keep only the last 5 artifacts
            const toDelete = artifacts.data.artifacts.slice(5);
            
            for (const artifact of toDelete) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }

  # ============================================================================
  # NOTIFICATION SUMMARY
  # ============================================================================
  
  notify-completion:
    name: 📢 Notify Completion
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [
      code-quality,
      frontend-tests,
      backend-tests,
      e2e-tests,
      accessibility-tests,
      performance-tests,
      build,
      security-scan,
      deploy-staging,
      deploy-production
    ]
    if: always()
    
    steps:
      - name: Calculate overall status
        id: status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          elif [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "status=cancelled" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send comprehensive notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}